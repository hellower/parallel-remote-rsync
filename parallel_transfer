#!/bin/bash

: '
This bash script automatize the data transfer from one remote server to
a local host. The transfering is make in a parallel fashion, since usually
the internet rate transfer is the bottleneck.

DEPENDENCIES: GNU parallel and rsync

Before using this script, make sure you have a SSH passwordless login.
INSTRUCTIONS:
1) Generate authentication keys on your local machine:
   $ ssh-keygen
2) Copy public key to the remote server:
   $ ssh-copy-id -i ~/.ssh/id_rsa.pub UserName@RemoteServer
   (ssh-copy-id connects to the remote machine and install your public key by
   adding it the authorized_keys file.)
3) Add a private key to the authentication agent on the local server:
   $ ssh-add

Author: Renato Fuzaro Miotto              Date: Aug 04 2019
'

################################################################################
#                                    INPUTS                                    #
################################################################################

remote_serv="user@server.edu"
remote_dir="/home/miotto/teste_script"
local_dir="/home/miotto/Desktop/TESTE_BASH/local"
ignore_files=(*.o *.mod *.a *.h *.cgns) # formats that won't be transfered
nrstfiles=3 # number of last rstfiles to be transfered

nthreads=4 # Number of parallel process

compress=false # set as true only if your bandwidth is really bad. Compression takes time. 

################################################################################

function adjust_format () {
    : 'Add a slash at the end of a directory path, in case it doesnt have it'
    local arg=$1
    if [[ ${arg: -1} != '/' ]]; then
        echo $arg/
    else
        echo $arg
    fi
}
remote_dir=$(adjust_format $remote_dir)
local_dir=$(adjust_format $local_dir)

# Ignore all restart files for now and add only the desired ones later
ignore_files+=(rstfile.*)
rstfiles=($(ssh -q $remote_serv find $remote_dir -type f -name "rstfile.*" | sort -r | head -$nrstfiles))
rel_rstfiles=(${rstfiles[@]##$remote_dir}) # relative path

# Create an array to be expanded in the bash find command. This array specifies
# that the formats passed in the input section of this script should be ignored
# by the find command.
prefix='! -name '
ignore_files=($(printf "\"%s\" " "${ignore_files[@]}")) # add double quotes in each element
ignore=("${ignore_files[@]/#/${prefix}}") # include prefix

# Search for all files but those whose formats were ignored
# Results are being sorted by modification time (oldest first)
selected_files=($(ssh -q $remote_serv find $remote_dir -type f ${ignore[@]} | sort))
rel_selected_files=(${selected_files[@]##$remote_dir}) # relative path

# Add the restart files to the selected files (relative path)
rel_selected_files+=(${rel_rstfiles[@]})


# Prepare "transfer.log" temporary file that specifies the commands to be used
# in the GNU parallel.
printf '%s\n' "${rel_selected_files[@]}" > transfer.log
if [ $compress = true ]; then
    flags='-avzm'
else
    flags='-avm'
fi
prefix='rsync '"$flags"' --stats --relative --safe-links --ignore-existing --human-readable -e "ssh -q" '"$remote_serv"':'"$remote_dir./"
suffix=" $local_dir"
sed -i -e "s~^~$prefix~" transfer.log
sed -i -e "s~.*~&$suffix~" transfer.log

cat transfer.log | parallel --will-cite -j $nthreads {} > result.log

